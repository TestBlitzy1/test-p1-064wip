version: '3.8'

services:
  # API Gateway Service
  api_gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    image: sales-intelligence/api-gateway:1.0.0
    environment:
      - ENV=${ENV:-development}
      - PORT=8000
      - DATABASE_URL=postgresql://user:password@postgres:5432/sales_intelligence
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BROKERS=kafka:9092
      - TRACING_ENABLED=true
      - METRICS_ENABLED=true
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - /app/data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 5s
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - backend_network
      - monitoring_network

  # AI Service with GPU Support
  ai_service:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    image: sales-intelligence/ai-service:1.0.0
    environment:
      - MODEL_DEVICE=cuda
      - MAX_BATCH_SIZE=32
      - MODEL_BASE_PATH=/app/models
      - INFERENCE_TIMEOUT=30
      - TRACING_ENABLED=true
      - METRICS_ENABLED=true
    volumes:
      - ./:/app
      - model_data:/app/models
      - model_cache:/cache
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        order: stop-first
      resources:
        limits:
          cpus: '4'
          memory: 8G
          nvidia.com/gpu: 1
        reservations:
          cpus: '2'
          memory: 4G
    networks:
      - backend_network
      - monitoring_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=sales_intelligence
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d sales_intelligence"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    networks:
      - backend_network

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    command: redis-server --requirepass redis_password --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - backend_network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    networks:
      - backend_network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - monitoring_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:9.5.0
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring_network

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"
      - "14250:14250"
    networks:
      - monitoring_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  model_data:
    driver: local
  model_cache:
    driver: local

networks:
  backend_network:
    driver: overlay
    attachable: true
    internal: true
    driver_opts:
      encrypted: "true"
  monitoring_network:
    driver: overlay
    attachable: true
    internal: true